#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import logging
import optparse
import os
import sys
import time
import re
import webbrowser
from launchpadlib.launchpad import Launchpad

import gettext
from gettext import gettext as _
gettext.textdomain(os.path.basename(sys.argv[0]))

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY,
                                'lp_fish_tools'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from lp_fish_tools import lp_fish_toolsconfig
from lp_fish_tools.util import *

# ==============================================================================
if __name__ == "__main__":

    version = lp_fish_toolsconfig.__lp_fish_tools_data_directory__

    description =_("""
Duplicate a bug, based on another bug.  Will allow you to edit the
description, and will copy status, settings etc..  If no BUG-ID
supplied, will attempt to get one off from the clipboard.
""")

    usage = _(os.path.basename(sys.argv[0]) + " [options] [BUG-ID]")
    parser = optparse.OptionParser(
        version=os.path.basename(sys.argv[0]) + " %s" % version, usage=usage,
        description = description)
    
    parser.add_option('-d', '--debug', dest='debug_mode', action='store_true',
        help=_('Print the maximum debugging info'))
    parser.add_option('-q', '--quiet', dest='quiet_mode', action='store_true',
        help=_('Print no logging info'))
    parser.add_option('-y', '--yes', dest='yes', action='store_true',
        help=_('continue without confirmation'))
    parser.add_option(
        '-s', '--system', type='string', default='production',
        dest='lpsystem', 
        help=("The Launchpad system to use.  Must be one of 'production',"
              " 'edge', 'staging' or 'dev'."))

    global options
    parser.set_defaults(logging_level=2)
    (options, args) = parser.parse_args()

    # set the verbosity
    if options.debug_mode:
        options.logging_level = 3
    logging.basicConfig(level=LEVELS[options.logging_level],
                        format='%(asctime)s %(levelname)s %(message)s')

    if len(args) == 0:
        args = splitInputValues(getClipboard())
        logging.info("Obtained bug ids from clipboard: \"%s\"" % ", ".join(args))

    try:
        [int(a) for a in args]
    except:
        logging.error("Some supplied args do not appear to be bug ids: \"%s\"." %
                      ", ".join(args))
        sys.exit(-1)

    if len(args) != 1:
        parser.error('Only specify one BUG-ID.')

    logging.info(_("Using Launchpad system '%s'") % options.lpsystem)

    # get launchpad object
    cachedir = os.path.join(os.environ["HOME"], ".launchpadlib/cache")
    lp = Launchpad.login_with("lp-fish-tools", options.lpsystem, cachedir)
    if not lp:
        fatal(_("failed to connect to launchpad"));

    # convert project into lp object
    bug = lp.bugs[args[0]]
    if not bug:
        fatal(_("Failed to obtain bug"))
    bugProjectNames = [bt.bug_target_name for bt in bug.bug_tasks]

    editableData = EditableData(
        "%s\n\nCopied from bug #%d" % (bug.description, bug.id),
        {
            "Projects" : " ".join(bugProjectNames),
            "Tags" : " ".join(bug.tags),
            "Title" : bug.title,
            })

    finished = False
    while True:
        logging.info("Passing bug description to user for editing")
        editableData.userEdit()

        # validate
        projects = []
        try:
            names = splitInputValues(editableData.namedValues["Projects"])
            for name in names:
                projects.append(lp.projects[name])
        except:
            logging.info("Invalid Project name '%s'" % name)
            continue

        if options.yes:
            break
        # user confirmation
        userInput = raw_input("Continue? [y]es/[r]eview/[N]o]> ").lower()
        if userInput == "y":
            break
        elif userInput == "r":
            continue
        else:
            logging.info("Quitting at user request")
            sys.exit(-1)

    # create new bug and add targets
    logging.info("Creating new bug")
    newBug = lp.bugs.createBug(
        description = editableData.baseText,
        private = bug.private,
        security_related = bug.security_related,
        tags = splitInputValues(editableData.namedValues["Tags"]),
        target = projects[0],
        title = editableData.namedValues["Title"])
    
    # copy team subscriptions.  Could be not what's required where a
    # task is now gone, however, on Sutton project, team sub
    # disappears
    for person in [sub.person for sub in bug.subscriptions]:
        if person.is_team:
            newBug.subscribe(person=person)

    # add other targets
    for target in projects[1:]:
        newBug.addTask(target=target)

    # set task values if new task was on old bug
    for target in projects:
        if target in [t.target for t in bug.bug_tasks]:
            try:
                newBugTask = getBugTask(target, newBug)
                oldBugTask = getBugTask(target, bug)
                newBugTask.importance = oldBugTask.importance
                newBugTask.status = oldBugTask.status
                newBugTask.lp_save()
            except:
                logging.info("Unable to set importance & status for project %s"
                             % (target.name))
                pass

    # pop it up in the browser
    logging.info("New bug created: %d - opening in browser..." % newBug.id)

    bugURL = "https://bugs.%slaunchpad.net/bugs/%d" %\
             ((options.lpsystem != "production") and options.lpsystem + "." or "",
              newBug.id)
    webbrowser.open(bugURL)

    logging.info(_("Done"))
